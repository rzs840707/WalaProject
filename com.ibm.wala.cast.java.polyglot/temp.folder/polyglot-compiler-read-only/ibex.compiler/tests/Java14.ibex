import java.util.List;
import java.io.*;

public class Java14 implements ibex.runtime.ICharParser {
    String input;
    int p = 0;
    public char scan() throws IOException {
        if (p < input.length())
            return input.charAt(p++);
        throw new EOFException(); }
    

    public static void main(String[] args) throws Exception {
        Java14 j = new Java14();
        j.input = args.length > 0 ? args[0] : "class C { }";
        j.CompilationUnit();
    }

    String Spacing ::= (WS | Comment)+ { return ""; }
    ;

    Object Comment ::= "//" (_ - NL)* (NL | ~[_])
                   | "/*" Any* "*/"
                   ;
    String Any ::= ~["*/"] _ { return "" + _; };
    String WS ::= " " | "\t" | "\f" | NL;
    String NL ::=  "\r" "\n"? { return "\n"; } | "\n";
    String NotNL ::= (_ - "\r" - "\n") { return ""; };

    Object Name ::= QualifiedName | SimpleName ;
    Object SimpleName ::= Identifier ;
    Object QualifiedName ::= Name `.` Identifier ;

    Object ClassOrInterfaceType ::= Name ;
    Object ClassType ::= ClassOrInterfaceType ;
    Object InterfaceType ::= ClassOrInterfaceType ;

    Object Modifier ::= `public`
                      | `protected`
                      | `private`
                      | `static`
                      | `abstract`
                      | `final`
                      | `native`
                      | `synchronized`
                      | `strictfp`
                      | `transient`
                      | `volatile`
                      ;

    Object FieldDeclaration ::=
        Modifier* Type VariableDeclarators `;`
        ;

    Object MethodHeader ::=
        Modifier* ResultType MethodDeclarator Throws?
        ;

    Object ResultType ::= Type | `void` ;

    Object ArrayType::= Type Dim ;

    Object Goal ::= Spacing? CompilationUnit ~[_] ;

Object Literal ::= IntegralLiteral | FPLiteral | BooleanLit | CharLit | StringLit | NullLit ;

        Object NullLit ::= `null` ;
        Object BooleanLit ::= `true` | `false` ;

        Object IntegralLiteral ::= IntegerLiteral ("L" | "l")? Spacing? ;
        Object IntegerLiteral ::= Dec | Hex | Oct ;
        Object Dec ::= (DecDigit - "0") DecDigit* { return ""; };
        Object Oct ::= "0" OctDigit* ;
        Object Hex ::= "0x" HexDigit+ ;
        char DecDigit ::= '0' .. '9' ;
        char OctDigit ::= '0' .. '7';
        char HexDigit ::= ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ;

        Object FPLiteral ::= DecDigit+ "." DecDigit* Exponent? Spacing?
                           | DecDigit+ Exponent Spacing?
                           | "." DecDigit+ Exponent? Spacing?
                           ;

        Object Exponent ::= ("E" | "e") ("+" | "-")? DecDigit+ ;

        Object CharLit ::= "'" SQChar "'" Spacing?
        ;       
        Object StringLit ::= '"' DQChar* '"' Spacing?
        ;

        char SQChar
              ::= (_ - "\\" - "\'" & NotNL) { return _; }
                | StringEscape
                ;

        char DQChar
              ::= (_ - "\\" - "\"" & NotNL) { return _; }
                | StringEscape
                ;

        char StringEscape
                ::= "\\" "n" { return '\n'; }
                  | "\\" "r" { return '\r'; }
                  | "\\" "f" { return '\f'; }
                  | "\\" "t" { return '\t'; }
                  | "\\" "b" { return '\b'; }
                  | "\\" "\"" { return '\"'; }
                  | "\\" "\\" { return '\\'; }
                  | "\\" "\'" { return '\''; }
                  | "\\" "x" HexDigit HexDigit
                    { return (char) Integer.parseInt(new String(new char[] { HexDigit1, HexDigit2 }), 16); }
                  | "\\" OctDigit OctDigit OctDigit
                    { return (char) Integer.parseInt(new String(new char[] { OctDigit1, OctDigit2, OctDigit3 }), 8); }
                  | "\\" OctDigit OctDigit ~[OctDigit]
                    { return (char) Integer.parseInt(new String(new char[] { OctDigit1, OctDigit2 }), 8); }
                  | "\\" OctDigit ~[OctDigit]
                    { return (char) Integer.parseInt(new String(new char[] { OctDigit }), 8); }
                  | "\\" (_ & NotNL) { return _; }
                  ;


// ReferenceType must be first since it could be PrimitiveType [ ]
Object Type ::= ReferenceType | PrimitiveType ;

Object 
      PrimitiveType::= NumericType | `boolean` ;

// FPType must be first (starts with integer)
      Object
      NumericType ::= FPType | IntegralType  ;
      Object
       IntegralType::= `byte` | `short` | `int` | `long` | `char` ;
      Object FPType ::= `float` | `double` ;

// ArrayType must be first since it could be ClassOrInterfaceType [ ]
      Object ReferenceType::= ArrayType | ClassOrInterfaceType;

Object
      CompilationUnit::=
       PackageDeclaration? ImportDeclaration* TypeDeclaration* ;

      Object
      PackageDeclaration::= `package` Name `;` ;
      Object ImportDeclaration::= 
       SingleTypeImportDeclaration | TypeImportOnDemandDeclaration ;
      
      Object
      SingleTypeImportDeclaration::= `import` Name `;` ;

      Object
      TypeImportOnDemandDeclaration::= `import` Name `.` `*` `;`
      ;

      Object TypeDeclaration::= 
ClassDeclaration
       |InterfaceDeclaration
        | `;`
        ;

      Object
      ClassDeclaration::= 
      Modifier*
      `class`
      Identifier
      ( `extends` ClassType )?
      ( `implements` InterfaceTypeList )?
      ClassBody
      ;

      Object
      InterfaceTypeList ::= InterfaceType ++ `,` ;

      Object
      ClassBody ::= `{` ClassMemberDeclaration* `}` ;

      Object
      ClassMemberDeclaration::=
       FieldDeclaration
      | MethodDeclaration
                        | StaticInitializer
                        | ConstructorDeclaration
      | ClassDeclaration
      | InterfaceDeclaration
      | `;`
      ;

      Object
      VariableDeclarators::= VariableDeclarator ++ `,`
      ; 

      Object
      VariableDeclarator::= VariableDeclaratorId ( `=` VariableInitializer ) ?
      ; 

      Object
      VariableDeclaratorId::= Identifier Dim*
      ; 

      Object
      VariableInitializer::= Expression | ArrayInitializer ;


      Object
      MethodDeclaration::= MethodHeader MethodBody
      ;

      Object
      MethodDeclarator::= Identifier `(` FormalParameterList `)`
                                         Dim*
      ;
      
      Object
      FormalParameterList ::= FormalParameter ** `,` ;

      Object
      FormalParameter::= Type VariableDeclaratorId ;

      Object
      Throws ::= `throws` ClassTypeList ;

      Object
      ClassTypeList::= ClassType ++ `,` ;

      Object
      MethodBody ::= Block | `;` ;

      Object
      StaticInitializer::= `static` Block ;

      Object
      ConstructorDeclaration::= Modifier*
       ConstructorDeclarator Throws? ConstructorBody ;

      Object
      ConstructorDeclarator::= SimpleName 
                                     `(` FormalParameterList `)`
                                     ;

      Object
      ConstructorBody::=  `{`
          ExplicitConstructorInvocation? BlockStatement*
      `}`
      ;

      Object
      ExplicitConstructorInvocation::= 
        (Primary `.`)? `this` `(` ArgumentList `)` `;`
      | (Primary `.`)? `super` `(` ArgumentList `)` `;`
      ;

      Object
      InterfaceDeclaration::=
      Modifier* `interface` Identifier
        ( `extends` InterfaceTypeList )?
        InterfaceBody
        ;

      Object
      InterfaceBody::= `{` InterfaceMemberDeclaration* `}`
      ;

      Object
      InterfaceMemberDeclaration::= 
        ConstantDeclaration
      | AbstractMethodDeclaration
      | ClassDeclaration
      | InterfaceDeclaration
      | `;`
      ;

      Object
      ConstantDeclaration::= FieldDeclaration ;

      Object
      AbstractMethodDeclaration::= MethodHeader `;`
      ;

      Object
      ArrayInitializer::= `{` VariableInitializer ** `,`
                `,`? `}`
                ;

      Object
      Block::= `{` BlockStatement* `}`
      ;

      Object
      BlockStatement::= 
      LocalVariableDeclarationStatement
      | Statement
      ;
      
      Object
      LocalVariableDeclarationStatement::= 
      LocalVariableDeclaration `;`
      ;

      Object
      LocalVariableDeclaration::= Modifier* Type VariableDeclarators ;

      Object
      Statement::= 
          LabeledStatement
        | IfStatement
        | WhileStatement
        | ForStatement
       | Block
       | EmptyStatement
       | SwitchStatement
       | DoStatement
       | BreakStatement
       | ContinueStatement
       | ReturnStatement
       | SynchronizedStatement
       | ThrowStatement
       | TryStatement
       | AssertStatement
       | ExpressionStatement
        ;

      Object
      EmptyStatement::= `;`
;

      Object
      AssertStatement::= `assert` Expression (`:` Expression)? ;
;

      Object
      LabeledStatement::= Identifier `:` Statement
        ;
      Object
      ExpressionStatement::= StatementExpression `;`
        ;

      Object
      StatementExpression::= Assignment 
                          | PreIncrementExpression
                          | PreDecrementExpression
                          | PostIncrementExpression
                          | PostDecrementExpression
                          | MethodInvocation
                          | NewExpression
      ;

      Object
      IfStatement::= `if` `(` Expression `)` Statement (`else` Statement)?
        ;
    
      Object
      SwitchStatement::= 
      `switch` `(` Expression `)` SwitchBlock
      ;

      Object
      SwitchBlock::=
      `{` SwitchBlockStatement+ `}`
      ;

      Object
      SwitchBlockStatement::= SwitchLabel BlockStatement* ;

      Object
      SwitchLabel::= `case` ConstantExpression `:`
                | `default` `:` ;

      Object
      WhileStatement::= `while` `(` Expression `)` Statement
        ;
      Object
      DoStatement::= `do` Statement `while` `(` Expression `)` `;`
        ;

      Object
      ForStatement::= `for` `(` ForInit? `;` Expression? `;` ForUpdate? `)` `;`
        ;

      Object
        ForInit ::= StatementExpressionList | LocalVariableDeclaration ;
      Object
        ForUpdate ::= StatementExpressionList ;

      Object
      StatementExpressionList::= StatementExpression ++ `,`
        ;

      Object
      BreakStatement::= `break` Identifier? `;`
      ;
      Object
      ContinueStatement::= `continue` Identifier? `;`
      ;
      Object
      ReturnStatement::= `return` Expression? `;`
      ;
      Object
      ThrowStatement::= `throw` Expression `;`
      ;
      Object
      SynchronizedStatement::= 
       `synchronized` `(` Expression `)` Block
      ;
      Object
      TryStatement::= 
         `try` Block Catch* `finally` Block
       | `try` Block Catch+
       ;
      Object
      Catch ::= `catch` `(` FormalParameter `)` Block
       ;

      Object
      Primary::= 
        NewExpression
      | MethodInvocation
      | ArrayAccess
      | FieldAccess
      | NewArray
      | (ClassType `.`)? `this`
      | Literal
      | `(` Expression `)`
      | Identifier
      ;
      
      Object
      NewExpression::= 
        (Primary `.`)?  `new` ClassType `(` ArgumentList `)`
      ;

      Object
      ArgumentList::= Expression ** `,`
      ;

      Object
      NewArray::= 
        `new` Type DimExpr+ Dim*
;

      Object
      DimExpr::= `[` Expression `]`
      ;

      Object
      Dim::= `[` `]`
      ;

      Object
      FieldAccess::= (Primary `.`)? `super` `.` Identifier
                   | Primary `.` Identifier
                   ;
      Object
      MethodInvocation::= 
          (Primary `.`)? `super` `.` Identifier `(` ArgumentList `)`
        | Primary `.` Identifier `(` ArgumentList `)`
        ;

      Object
      ArrayAccess::= 
        ~[NewArray] Primary DimExpr
      ;

      Object
      PostfixExpression::= 
           PostIncrementExpression
         | PostDecrementExpression
         | Primary
         ;
      
      Object
     PostIncrementExpression::= PostfixExpression `++`
        ;
      Object
     PostDecrementExpression::= PostfixExpression `--`
        ;

      Object
        UnaryExpression ::= PreIncrementExpression
                        | PreDecrementExpression
                        | `+` UnaryExpression
                        | `-` UnaryExpression
                        | UnaryExpressionNotPlusMinus
                        ;

      Object
      PreIncrementExpression::= `++` UnaryExpression ;
      Object
      PreDecrementExpression::= `--` UnaryExpression ;

      Object
      UnaryExpressionNotPlusMinus::=
                             CastExpression
                | PostfixExpression
                | `~` UnaryExpression
                | `!` UnaryExpression
                ;

      Object
      CastExpression::= 
        `(` Type `)` UnaryExpression
        ;

      Object BinaryExpression ::=
      ( ^BinaryExpression `||` BinaryExpression) /
      ( ^BinaryExpression `&&` BinaryExpression) /
      ( ^BinaryExpression `|` BinaryExpression) /
      ( ^BinaryExpression `^` BinaryExpression) /
      ( ^BinaryExpression `&` BinaryExpression) /
      ( ^BinaryExpression `==` BinaryExpression
      | ^BinaryExpression `!=` BinaryExpression) /
      ( ^BinaryExpression `<` BinaryExpression
      | ^BinaryExpression `>` BinaryExpression
      | ^BinaryExpression `<=` BinaryExpression
      | ^BinaryExpression `>=` BinaryExpression
      | ^BinaryExpression `instanceof` BinaryExpression) /
      ( ^BinaryExpression `<<` BinaryExpression
      | ^BinaryExpression `>>` BinaryExpression
      | ^BinaryExpression `>>>` BinaryExpression) /
      ( ^BinaryExpression `+` BinaryExpression
      | ^BinaryExpression `-` BinaryExpression ) /
      ( ^BinaryExpression `*` BinaryExpression
      | ^BinaryExpression `/` BinaryExpression
      | ^BinaryExpression `%` BinaryExpression) /
        UnaryExpression
      ;

      Object
      ConditionalExpression::=
        BinaryExpression `?` Expression `:` ConditionalExpression
      | BinaryExpression
      ;

      Object
      AssignmentExpression::= Assignment
      | ConditionalExpression
      ;

      Object
      Assignment::= LeftHandSide AssignmentOperator AssignmentExpression
      ;

      Object
      LeftHandSide::=
          FieldAccess [AssignmentOperator]
        | ArrayAccess [AssignmentOperator]
        | Identifier [AssignmentOperator]
      ;

      Object
      AssignmentOperator::=
          `=`
        | `*=`
        | `/=`
        | `%=`
        | `+=`
        | `-=`
        | `<<=`
        | `>>=`
        | `>>>=`
        | `&=`
        | `^=`
        | `|=`
        ;

      Object
      Expression::= AssignmentExpression ; 

      Object
      ConstantExpression::= Expression
      ;
      
Object `!=` ::= "!=" Spacing? ;
Object `!` ::= "!" ~["="] Spacing? ;
Object `%=` ::= "%=" Spacing? ;
Object `%` ::= "%" ~["="] Spacing? ;
Object `&&` ::= "&&" Spacing? ;
Object `&=` ::= "&=" Spacing? ;
Object `&` ::= "&" ~["="] ~["&"] Spacing? ;
Object `(` ::= "(" Spacing? ;
Object `)` ::= ")" Spacing? ;
Object `*=` ::= "*=" Spacing? ;
Object `*` ::= "*" ~["="] Spacing? ;
Object `++` ::= "++" Spacing? ;
Object `+=` ::= "+=" Spacing? ;
Object `+` ::= "+" ~["+"] ~["="] Spacing? ;
Object `,` ::= "," Spacing? ;
Object `--` ::= "--" Spacing? ;
Object `-=` ::= "-=" Spacing? ;
Object `-` ::= "-" ~["="] ~["-"] Spacing? ;
Object `.` ::= "." Spacing? ;
Object `/=` ::= "/=" Spacing? ;
Object `/` ::= "/" Spacing? ;
Object `:` ::= ":" Spacing? ;
Object `;` ::= ";" Spacing? ;
Object `<<=` ::= "<<=" Spacing? ;
Object `<<` ::= "<<" ~["="] Spacing? ;
Object `<=` ::= "<=" Spacing? ;
Object `<` ::= "<" ~["<"] ~["="] Spacing? ;
Object `==` ::= "==" Spacing? ;
Object `=` ::= "=" ~["="] Spacing? ;
Object `>=` ::= ">=" Spacing? ;
Object `>>=` ::= ">>=" Spacing? ;
Object `>>>=` ::= ">>>=" Spacing? ;
Object `>>>` ::= ">>>" ~["="] Spacing? ;
Object `>>` ::= ">>" ~[">"] ~["="] Spacing? ;
Object `>` ::= ">" ~[">"] ~["="] Spacing? ;
Object `?` ::= "?" Spacing? ;
Object `[` ::= "[" Spacing? ;
Object `]` ::= "]" Spacing? ;
Object `^=` ::= "^=" Spacing? ;
Object `^` ::= "^" ~["="] Spacing? ;
Object `{` ::= "{"  Spacing? ;
Object `|=` ::= "|="  Spacing? ;
Object `|` ::= "|" ~["|"] ~["="]  Spacing? ;
Object `||` ::= "||"  Spacing? ;
Object `}` ::= "}"  Spacing? ;
Object `~` ::= "~"  Spacing? ;

Object `abstract` ::= "abstract" KWFollow Spacing? ;
Object `boolean` ::= "boolean" KWFollow Spacing? ;
Object `break` ::= "break" KWFollow Spacing? ;
Object `byte` ::= "byte" KWFollow Spacing? ;
Object `case` ::= "case" KWFollow Spacing? ;
Object `catch` ::= "catch" KWFollow Spacing? ;
Object `char` ::= "char" KWFollow Spacing? ;
Object `class` ::= "class" KWFollow Spacing? ;
Object `continue` ::= "continue" KWFollow Spacing? ;
Object `default` ::= "default" KWFollow Spacing? ;
Object `do` ::= "do" KWFollow Spacing? ;
Object `double` ::= "double" KWFollow Spacing? ;
Object `else` ::= "else" KWFollow Spacing? ;
Object `extends` ::= "extends" KWFollow Spacing? ;
Object `false` ::= "false" KWFollow Spacing? ;
Object `final` ::= "final" KWFollow Spacing? ;
Object `finally` ::= "finally" KWFollow Spacing? ;
Object `float` ::= "float" KWFollow Spacing? ;
Object `for` ::= "for" KWFollow Spacing? ;
Object `if` ::= "if" KWFollow Spacing? ;
Object `implements` ::= "implements" KWFollow Spacing? ;
Object `import` ::= "import" KWFollow Spacing? ;
Object `instanceof` ::= "instanceof" KWFollow Spacing? ;
Object `int` ::= "int" KWFollow Spacing? ;
Object `interface` ::= "interface" KWFollow Spacing? ;
Object `long` ::= "long" KWFollow Spacing? ;
Object `native` ::= "native" KWFollow Spacing? ;
Object `new` ::= "new" KWFollow Spacing? ;
Object `null` ::= "null" KWFollow Spacing? ;
Object `package` ::= "package" KWFollow Spacing? ;
Object `private` ::= "private" KWFollow Spacing? ;
Object `protected` ::= "protected" KWFollow Spacing? ;
Object `public` ::= "public" KWFollow Spacing? ;
Object `return` ::= "return" KWFollow Spacing? ;
Object `short` ::= "short" KWFollow Spacing? ;
Object `static` ::= "static" KWFollow Spacing? ;
Object `super` ::= "super" KWFollow Spacing? ;
Object `switch` ::= "switch" KWFollow Spacing? ;
Object `synchronized` ::= "synchronized" KWFollow Spacing? ;
Object `this` ::= "this" KWFollow Spacing? ;
Object `throw` ::= "throw" KWFollow Spacing? ;
Object `throws` ::= "throws" KWFollow Spacing? ;
Object `transient` ::= "transient" KWFollow Spacing? ;
Object `true` ::= "true" KWFollow Spacing? ;
Object `try` ::= "try" KWFollow Spacing? ;
Object `void` ::= "void" KWFollow Spacing? ;
Object `volatile` ::= "volatile" KWFollow Spacing? ;
Object `while` ::= "while" KWFollow Spacing? ;
Object `assert` ::= "assert" KWFollow Spacing? ;
Object `strictfp` ::= "strictfp" KWFollow Spacing? ;


char Letter ::= ( 'a' .. 'z' | 'A' .. 'Z' | '_' );

/*
char Letter ::= (
       '\u0024' |
       '\u0041'..'\u005a' |
       '\u005f' |
       '\u0061'..'\u007a' |
       '\u00c0'..'\u00d6' |
       '\u00d8'..'\u00f6' |
       '\u00f8'..'\u00ff' |
       '\u0100'..'\u1fff' |
       '\u3040'..'\u318f' |
       '\u3300'..'\u337f' |
       '\u3400'..'\u3d2d' |
       '\u4e00'..'\u9fff' |
       '\uf900'..'\ufaff'
      );
      */

char Digit ::= '0' .. '9';
/*
char Digit ::= (
       '\u0030'..'\u0039' |
       '\u0660'..'\u0669' |
       '\u06f0'..'\u06f9' |
       '\u0966'..'\u096f' |
       '\u09e6'..'\u09ef' |
       '\u0a66'..'\u0a6f' |
       '\u0ae6'..'\u0aef' |
       '\u0b66'..'\u0b6f' |
       '\u0be7'..'\u0bef' |
       '\u0c66'..'\u0c6f' |
       '\u0ce6'..'\u0cef' |
       '\u0d66'..'\u0d6f' |
       '\u0e50'..'\u0e59' |
       '\u0ed0'..'\u0ed9' |
       '\u1040'..'\u1049'
      );
      */

Object IdentifierPat ::= Letter ( Letter | Digit )*;

Object Identifier ::= ( IdentifierPat - Keyword ) Spacing?
  ;

Object Keyword ::= KW KWFollow;
void KWFollow ::= ~[Letter | Digit]; // Follow(Keyword)

Object KW ::= 
   "abstract"
 | "boolean"
 | "break"
 | "byte"
 | "case"
 | "catch"
 | "char"
 | "class"
 | "continue"
 | "default"
 | "do"
 | "double"
 | "else"
 | "extends"
 | "false"
 | "final"
 | "finally"
 | "float"
 | "for"
 | "if"
 | "implements"
 | "import"
 | "instanceof"
 | "int"
 | "interface"
 | "long"
 | "native"
 | "new"
 | "null"
 | "package"
 | "private"
 | "protected"
 | "public"
 | "return"
 | "short"
 | "static"
 | "super"
 | "switch"
 | "synchronized"
 | "this"
 | "throw"
 | "throws"
 | "transient"
 | "true"
 | "try"
 | "void"
 | "volatile"
 | "while"
 | "assert"
 | "strictfp"
 ;

}
