
      Identifier::=
   IDENTIFIER
        ;


   IDENTIFIER ::= IdStart IdRest*
        ;

        IdStart ::= 'a'..'z' / 'A'..'Z' / '_';
        IdRest ::= IdStart / '0'..'9';

      QualifiedIdentifier::=
   Identifier ( `.` Identifier )*

      Literal::=
   IntegerLiteral
 / FloatingPointLiteral
 / CharacterLiteral
 / StringLiteral
 / BooleanLiteral
 / NullLiteral

      Expression::=
   Expression1 (AssignmentOperator Expression1)*

      AssignmentOperator::=
   `=`
 / `+=`
 / `-=`
 / `*=`
 / `/=`
 / `&=`
 / `|=`
 / `^=`
 / `%=`
 / `<<=`
 / `>>=`
 / `>>>=`

      Type::=
   Identifier ++ `.` BracketsOpt
 / BasicType

      StatementExpression::=
   Expression

      ConstantExpression::=
   Expression

      Expression1::=
   Expression2 Expression1Rest?

      Expression1Rest::=
     `?`   Expression   `:`   Expression1

      Expression2 ::=
   Expression3 Expression2Rest?

      Expression2Rest::=
   (Infixop Expression3)*
 / Expression3 `instanceof` Type

      Infixop::=
   `||`
 / `&&`
 / `|`
 / `^`
 / `&`
 / `==`
 / `!=`
 / `<`
 / `>`
 / `<=`
 / `>=`
 / `<<`
 / `>>`
 / `>>>`
 / `+`
 / `-`
 / `*`
 / `/`
 / `%`

      Expression3::=
   PrefixOp Expression3
 / `(`   Type  / Expr  `)`   Expression3
 / Primary Selector* PostfixOp*

      Primary::=
   `(` Expression `)`
 / `this` Arguments?
 / `super` SuperSuffix
 / Literal
 / `new` Creator
 / Identifier ** `.` IdentifierSuffix?
 / BasicType BracketsOpt `.` `class`
 / `void` `.` `class`

      IdentifierSuffix::=
   [ ( ] BracketsOpt   .   class | Expression ])
 / Arguments
 / .   ( class | this | super Arguments | new InnerCreator )

      PrefixOp::=
   `++`
 / `--`
 / `!`
 / `~`
 / `+`
 / `-`

      PostfixOp::=
   `++`
 / `--`

      Selector::=
   `.` Identifier Arguments?
 / `.` `this`
 / `.` `super` SuperSuffix
 / `.` `new` InnerCreator
 / `[` Expression `]`

      SuperSuffix::=
   Arguments
 / . Identifier [Arguments]

      BasicType::=
   `byte`
 / `short`
 / `char`
 / `int`
 / `long`
 / `float`
 / `double`
 / `boolean`

      Arguments::=
     `(` Expression ** `,` `)`

      BracketsOpt::= (`[` `]`)*

      Creator::=
   QualifiedIdentifier ( ArrayCreatorRest  | ClassCreatorRest )

      InnerCreator::=
   Identifier ClassCreatorRest

      ArrayCreatorRest::=
   [ ( ] BracketsOpt ArrayInitializer | Expression ] {[ Expression ]}
      BracketsOpt )

      ClassCreatorRest::=
   Arguments ClassBody?

      ArrayInitializer::=
   VariableInitializer ** `,` `,`?

      VariableInitializer::=
   ArrayInitializer
 / Expression

      ParExpression::=
   `(` Expression `)`

      Block::=
   `{` BlockStatement* `}`

      BlockStatement ::=
   LocalVariableDeclarationStatement
 / ClassOrInterfaceDeclaration
 / Statement

      LocalVariableDeclarationStatement::=
   LocalModifier* Type VariableDeclarators   `;`

      Statement::=
   Block
 / `if` ParExpression Statement (`else` Statement)?
 / `for` `(` ForInitOpt   `;`   [Expression]   `;`   ForUpdateOpt `)` Statement
 / `while` ParExpression Statement
 / `do` Statement `while` ParExpression   `;`
 / `try` Block ( Catch+ / Catch* `finally` Block )
 / `switch` ParExpression SwitchBlockStatementGroup*
 / `synchronized` ParExpression Block
 / `return` Expression? `;`
 / `throw` Expression   `;`
 / `break` Identifier? `;`
 / `continue` Identifier? `;`
 / `;`
 / ExpressionStatement
 / Identifier   `:`   Statement

      CatchClause::=
   `catch` `(` FormalParameter `)` Block

      SwitchBlockStatementGroup::=
   SwitchLabel BlockStatement*
SwitchLabel
      SwitchLabel::=
   `case` ConstantExpression   `:`
 / `default` `:`

      ForInit::=
   StatementExpression ++ `,`
 / LocalModifier* Type VariableDeclarators

      ForUpdate::=
   StatementExpression ++ `,`

      Modifier::=
   `public`
 / `protected`
 / `private`
 / `static`
 / `abstract`
 / `final`
 / `native`
 / `synchronized`
 / `transient`
 / `volatile`
 / `strictfp`

      VariableDeclarators::=
   VariableDeclarator ++ `,`

      VariableDeclarator::=
   Identifier VariableDeclaratorRest

      ConstantDeclarator::=
   Identifier ConstantDeclaratorRest

      VariableDeclaratorRest::=
   BracketsOpt (  `=`   VariableInitializer)?

      ConstantDeclaratorRest::=
   BracketsOpt   `=`   VariableInitializer

      VariableDeclaratorId::=
   Identifier BracketsOpt

      CompilationUnit::=
   Spacing?
        ( `package` QualifiedIdentifier   `;`  )?
        ImportDeclaration*
        TypeDeclaration*

      ImportDeclaration::=
   `import` QualifiedIdentifier (`.` `*`)? `;`

      TypeDeclaration::=
   ClassOrInterfaceDeclaration
 / `;`

      ClassOrInterfaceDeclaration::=
   Modifier* (ClassDeclaration / InterfaceDeclaration)

      ClassDeclaration::=
   `class` Identifier (`extends` Type)? (`implements` TypeList)? ClassBody

      InterfaceDeclaration::=
   `interface` Identifier (`extends` TypeList)? InterfaceBody

      TypeList::=
   Type ++ `,`

      ClassBody::=
   `{` ClassBodyDeclaration* `}`

      InterfaceBody::=
   `{` InterfaceBodyDeclaration* `}`

      ClassBodyDeclaration::=
   `;`
 / `static`? Block
 / Modifier* MemberDecl

      MemberDecl::=
   MethodOrFieldDecl
 / `void` Identifier MethodDeclaratorRest
 / Identifier ConstructorDeclaratorRest
 / ClassOrInterfaceDeclaration

      MethodOrFieldDecl::=
   Type Identifier MethodOrFieldRest

      MethodOrFieldRest::=
   VariableDeclaratorRest
 / MethodDeclaratorRest

      InterfaceBodyDeclaration::=
   `;`
 / Modifier* InterfaceMemberDecl
        ;

      InterfaceMemberDecl::=
   InterfaceMethodOrFieldDecl
 / `void` Identifier VoidInterfaceMethodDeclaratorRest
 / ClassOrInterfaceDeclaration
        ;

      InterfaceMethodOrFieldDecl::=
   Type Identifier InterfaceMethodOrFieldRest
        ;

      InterfaceMethodOrFieldRest::=
   ConstantDeclaratorsRest ;
 / InterfaceMethodDeclaratorRest
        ;

      MethodDeclaratorRest::=
           FormalParameters BracketsOpt (`throws` QualifiedIdentifierList)?
                ( MethodBody /   `;`  )
        ;

      VoidMethodDeclaratorRest::=
           FormalParameters (`throws` QualifiedIdentifierList)?
                ( MethodBody /   `;`  )
        ;

      InterfaceMethodDeclaratorRest::=
   FormalParameters BracketsOpt (`throws` QualifiedIdentifierList)?   `;`
        ;

      VoidInterfaceMethodDeclaratorRest::=
   FormalParameters (`throws` QualifiedIdentifierList)   `;`
        ;

      ConstructorDeclaratorRest::=
   FormalParameters (`throws` QualifiedIdentifierList)  MethodBody
        ;

      QualifiedIdentifierList::=
   QualifiedIdentifier ++ `,`
        ;

      FormalParameters::=
        `(` FormalParameter ** `,` `)`
        ;

      FormalParameter::=
        FormalModifiers* Type VariableDeclaratorId

      FormalModifier ::=
        `final`
        ;

      MethodBody::=
        Block
        ;

