include "/Users/nystrom/work/x10/1.7-svn/polyglot/src/polyglot/parse/java12.cup"

package ibex.parse;

import ibex.types.IbexTypeSystem;
import ibex.ast.*;
import polyglot.parse.ParsedName;
import polyglot.parse.VarDeclarator;

parser Grm extends polyglot.parse.Grm {:
    public final IbexTypeSystem ts;
    public final IbexNodeFactory nf;

    public Grm(Lexer l, TypeSystem t, NodeFactory n, ErrorQueue q) {
        super(l, t, n, q);
        ts = (IbexTypeSystem) t;
        nf = (IbexNodeFactory) n;
    }
:};

terminal Token DOTDOT;
terminal Token MULTMULT;
terminal Token COLONCOLONEQ;
terminal Token AUTO;

non terminal RuleDecl rule_declaration;
non terminal RhsExpr rhs;
non terminal RhsExpr rhs_ordered_cases;
non terminal RhsExpr rhs_cases;
non terminal RhsExpr rhs_case;
non terminal RhsExpr rhs_seq;
non terminal RhsExpr rhs_seq_block;
non terminal RhsExpr rhs_term;
non terminal RhsExpr rhs_iterator;
non terminal RhsExpr rhs_primary;
non terminal RhsExpr inner;
non terminal RhsInvoke rhs_invoke;
non terminal Expr rhs_expr;
non terminal RhsExpr rhs_lit;
non terminal Expr restricted_primary;
non terminal Expr restricted_field_access;
non terminal Expr restricted_method_invocation;

start with goal;

extend class_member_declaration ::=
        rule_declaration:a
            {: List l = new TypedList(new LinkedList(), ClassMember.class, false);
               l.add(a);
               RESULT = l; :}
      ;
      
extend modifier ::=
        AUTO:a {:
               RESULT = parser.nf.FlagsNode(parser.pos(a), Flags.STRICTFP); 
               :}
      ;

rule_declaration ::=
        modifiers_opt:a type:b identifier:c COLONCOLONEQ:x rhs:d SEMICOLON
          {: RESULT = parser.nf.RuleDecl(parser.pos(b,c),
                                          a,
                                          b,
                                          c,
                                          Collections.singletonList(d)); :}
      | modifiers_opt:a VOID:b identifier:c COLONCOLONEQ:x rhs:d SEMICOLON
          {: RESULT = parser.nf.RuleDecl(parser.pos(b,c),
                                          a,
                                          parser.nf.CanonicalTypeNode(parser.pos(b), parser.ts.Void()),
                                          c,
                                          Collections.singletonList(d)); :}
      ;

         
rhs ::= rhs_ordered_cases:a
          {: RESULT = a; :}
      ;

rhs_ordered_cases ::=
        rhs_ordered_cases:a DIV rhs_cases:b
          {: RESULT = parser.nf.RhsOrdered(parser.pos(a,b), a, b); :}
      | rhs_cases:a
          {: RESULT = a; :}
      ;
      
rhs_cases ::=
        rhs_cases:a OR rhs_case:b
          {: RESULT = parser.nf.RhsOr(parser.pos(a,b), a, b); :}
      | rhs_case:a
          {: RESULT = a; :}
      ;
      
rhs_case ::=
        rhs_case:a AND rhs_seq_block:b
          {: RESULT = parser.nf.RhsAnd(parser.pos(a,b), a, b); :}
      | rhs_case:a MINUS rhs_seq_block:b
          {: RESULT = parser.nf.RhsMinus(parser.pos(a,b), a, b); :}
      | rhs_seq_block:a
          {: RESULT = a; :}
      ;
            
rhs_seq_block ::= 
        rhs_seq:a
          {: RESULT = a; :}
      | rhs_seq:a block:b
          {: RESULT = parser.nf.RhsAction(parser.pos(a,b), a, b); :}
      ;

rhs_seq ::=
        /* empty */
          {: RESULT = parser.nf.RhsSequence(Position.COMPILER_GENERATED, Collections.EMPTY_LIST); :}
      | rhs_seq:a rhs_term:b
          {: List l = new ArrayList();
             if (a instanceof RhsSequence)
                 l.addAll(((RhsSequence) a).items());
             else
                 l.add(a);
             if (b instanceof RhsSequence)
                 l.addAll(((RhsSequence) b).items());
             else
                 l.add(b);
             if (l.size() == 1)
                 RESULT = (RhsExpr) l.get(0);
             else
                 RESULT = parser.nf.RhsSequence(parser.pos(a,b), l); :}
      ;

rhs_term ::=
          rhs_iterator:a
          {: RESULT = a; :}
        ;

rhs_iterator ::=
          rhs_primary:a QUESTION:b
          {: RESULT = parser.nf.RhsOption(parser.pos(a,b), a); :}
        | rhs_primary:a MULT:b
          {: RESULT = parser.nf.RhsStar(parser.pos(a,b), a); :}
        | rhs_primary:a PLUS:b
          {: RESULT = parser.nf.RhsPlus(parser.pos(a,b), a); :}
/*
        | rhs_primary:a QUESTION:b
          {: RESULT = parser.nf.RhsCount(parser.pos(a,b), a,
            nf.IntLit(parser.pos(b), IntLit.INT, 0),
            nf.IntLit(parser.pos(b), IntLit.INT, 1)); :}
        | rhs_primary:a LBRACE:b COMMA expression:d RBRACE:e
          {: RESULT = parser.nf.RhsCount(parser.pos(a,e), a, null, d); :}
        | rhs_primary:a LBRACE:b expression:c COMMA RBRACE:e
          {: RESULT = parser.nf.RhsCount(parser.pos(a,e), a, c, null); :}
        | rhs_primary:a LBRACE:b expression:c COMMA expression:d RBRACE:e
          {: RESULT = parser.nf.RhsCount(parser.pos(a,e), a, c, d); :}
        | rhs_primary:a MULT:b
          {: RESULT = parser.nf.RhsCount(parser.pos(a,b), a, nf.IntLit(parser.pos(b), IntLit.INT, 0), null); :}
        | rhs_primary:a PLUS:b
          {: RESULT = parser.nf.RhsCount(parser.pos(a,b), a, nf.IntLit(parser.po
s(b), IntLit.INT, 1), null); :}
*/
        | rhs_primary:a MULTMULT rhs_primary:b
          {: RESULT = parser.nf.RhsStarList(parser.pos(a,b), a, b); :}
        | rhs_primary:a PLUSPLUS rhs_primary:b
          {: RESULT = parser.nf.RhsPlusList(parser.pos(a,b), a, b); :}
        | rhs_primary:a
          {: RESULT = a; :}
        ;

rhs_expr ::=
    restricted_primary:a {: RESULT = a; :}
 |  name:a {:  RESULT = a.toExpr();  :}
  ;

restricted_field_access ::=
    restricted_primary:a DOT identifier:b {:
                               RESULT = parser.nf.Field(parser.pos(a, b, b), a,
                b); 
                               :}
 |  SUPER:n DOT identifier:a {:
                             RESULT = parser.nf.Field(parser.pos(a),
                parser.nf.Super(parser.pos(n)),
                a); 
                             :}
 |  name:a DOT SUPER:n DOT identifier:b {:
                                        RESULT = parser.nf.Field(parser.pos(b),
                parser.nf.Super(parser.pos(n), a.toType()),
                b); 
                                        :};
 
restricted_method_invocation ::=
    name:a LPAREN argument_list_opt:b RPAREN:d {:
                                               RESULT = parser.nf.Call(parser.pos(a,d),
                a.prefix == null ? null : a.prefix.toReceiver(),
                a.name, b); 
                                               :}
 |  restricted_primary:a DOT identifier:b LPAREN argument_list_opt:c RPAREN:d {:
                                                                   RESULT = parser.nf.Call(parser.pos(b,d), a,
                b, c); 
                                                                   :}
 |  SUPER:a DOT identifier:b LPAREN argument_list_opt:c RPAREN:d {:
                                                                 RESULT = parser.nf.Call(parser.pos(a,d, b),
                parser.nf.Super(parser.pos(a)),
                b, c); 
                                                                 :}
 |  name:a DOT SUPER:n DOT identifier:b LPAREN argument_list_opt:c RPAREN:d {:
                                                                            RESULT = parser.nf.Call(parser.pos(b,d),
                parser.nf.Super(parser.pos(n), a.toType()),
                b, c); 
                :}
                ;
 
restricted_primary ::=
    literal:a {:  RESULT = a;  :}
 |  restricted_field_access:a {:  RESULT = a;  :}
 // |  restricted_method_invocation:a {:  RESULT = a;  :}
 ;

rhs_lit ::= rhs_expr:a {:
                  if (a instanceof AmbExpr &&((AmbExpr) a).name().id() == polyglot.types.Name.make("_")) {
                          RESULT = parser.nf.RhsAnyChar(parser.pos(a));
                  } else {
                     RESULT = parser.nf.RhsLit(parser.pos(a), a);
                  }
                  :}
                  ;
rhs_invoke ::= rhs_expr:a {:
                  if (a instanceof AmbExpr) {
                          AmbExpr e = (AmbExpr) a;
                          RESULT = parser.nf.RhsInvoke(parser.pos(a), parser.nf.Call(parser.pos(a), e.name()));
                  } else if (a instanceof Field) {
                          Field e = (Field) a;
                          RESULT = parser.nf.RhsInvoke(parser.pos(a), parser.nf.Call(parser.pos(a), e.target(), e.name()));
                  } else {
                          assert false;
                  }
:}
;

rhs_primary ::=
   rhs_lit:a {: RESULT = a; :}
 | XOR rhs_invoke:a {: RESULT = a.assocTag(true); :}
 | rhs_expr:a DOTDOT rhs_expr:b
          {:  RESULT = parser.nf.RhsRange(parser.pos(a, b), a, b); :}
 | COMP rhs_lit:a
          {:  RESULT = parser.nf.RhsMinus(parser.pos(a),
                                          parser.nf.RhsAnyChar(parser.pos(a)),
                                          a); :}
 | LPAREN:a inner:c RPAREN:b
          {: RESULT = (RhsExpr) c.position(parser.pos(a,b)); :}
 | LBRACK:x rhs:a RBRACK:y
          {: RESULT = parser.nf.RhsPosLookahead(parser.pos(x,y), a); :}
 | COMP LBRACK:x rhs:a RBRACK:y
          {: RESULT = parser.nf.RhsNegLookahead(parser.pos(x,y), a); :}
        ;

inner ::=
   FINAL type:a simple_name:d EQ rhs:b
          {: RESULT = parser.nf.RhsBind(parser.pos(a,b), parser.nf.LocalDecl(parser.pos(a,b), parser.nf.FlagsNode(parser.pos(a), Flags.FINAL), a, d.name, b));
             :}
/*
 | type:a simple_name:d EQ rhs:b
          {: RESULT = parser.nf.RhsBind(parser.pos(a,b), parser.nf.LocalDecl(parser.pos(a,b), parser.nf.FlagsNode(parser.pos(a), Flags.NONE), a, d.name, b));
             :}
 | simple_name:a EQ rhs:b
          {: RESULT = parser.nf.RhsBind(parser.pos(a,b), parser.nf.LocalDecl(parser.pos(a,b), parser.nf.FlagsNode(parser.pos(a), Flags.FINAL), parser.nf.UnknownTypeNode(parser.pos(a)), a.name, b));
             :}
*/
 | rhs:a
          {: RESULT = a; :}
 ;
      
