<project name="polyglot" default="jl5" basedir=".">
	<description>
    Polyglot build file
  </description>
	

	<!-- set global properties for this build -->

	<!-- source directory -->
	<property name="src" location="${basedir}/src" />

	<!-- directory for class file targets -->
	<property name="classes" location="${basedir}/classes" />
	<property name="cup-classes" location="${classes}" />

	<!-- directory for jar files -->
	<property name="lib" location="${basedir}/lib" />

	<!-- distribution directory -->
	<property name="dist" location="${basedir}/dist" />
	<!-- polyglot5 dist -->
	<property name="polyglot5-dist" location="${dist}/polyglot5" />

	

	<!-- binaries directory -->
	<property name="bin" location="${basedir}/bin" />

	<path id="standard.classpath">
		<pathelement location="${classes}" />
		<pathelement location="${lib}/java_cup.jar" />
		<pathelement location="${lib}/JFlex.jar" />
		<pathelement location="${lib}/polyglot.jar" />
	</path>

	<target name="configure" description="Configures Polyglot" depends="check-classpath" unless="configure.up-to-date">
		<echo message="java version is ${java.version}" />
		<echo message="current directory is ${user.dir}" />
		<echo message="Java home directory is ${java.home}" />
		<property name="configure.up-to-date" value="true" />
	</target>

	<!-- Check that the class path is correct. -->
	<target name="check-classpath">
<!--     <available classname="java_cup.Main" property="cp_existence.java_cup"/>
    <available classname="JFlex.Main" property="cp_existence.jlex"/>
    <fail unless="cp_existence.java_cup" 
          message="The java_cup classes must be on the classpath. Try adding java_cup.jar to the classpath."/>
    <fail unless="cp_existence.jlex" 
          message="The JFlex classes must be on the classpath. Try adding JFlex.jar to the classpath."/>
-->	</target>

	<!-- create appropriate executables in the bin directory -->
	<target name="bin" depends="configure">
		<antcall target="jl5c" />
	</target>

	<target name="bin-deps">
		<dependset>
			<srcfileset dir="${bin}" includes="jlc.in" />
			<targetfileset dir="${bin}" includes="jl5c" />
		</dependset>
		<condition property="bin.up-to-date">
			<available file="${bin}/jl5c" />
		</condition>
	</target>

	<target name="defs-deps">
		<condition property="defs.up-to-date">
			<available file="${bin}/defs" />
		</condition>
	</target>

	<!-- creates a file containing common environment variable definitions -->
	<target name="executable-defs" depends="defs-deps" unless="defs.up-to-date">
		<echo message="Creating ${bin}/defs" />
		<echo file="${bin}/defs" append="no">#!/bin/sh
# DO NOT EDIT - This file was automatically generated.

JAVA='${java.home}/bin/java'
FILE_SEP='${file.separator}'
PATH_SEP='${path.separator}'
TOP='${basedir}'
    </echo>
	</target>

	<!-- creates the executable script jlc -->
	<target name="jl5c" depends="executable-defs">
		<echo message="Creating ${bin}/jl5c" />
		<concat destfile="${bin}/jl5c" append="no">
			<filelist dir="${bin}" files="defs" />
		</concat>
		<echo file="${bin}/jl5c" append="yes">
ext="jl5"

</echo>
		<concat destfile="${bin}/jl5c" append="yes">
			<filelist dir="${bin}" files="jlc.in" />
		</concat>

		<chmod perm="+x" file="${bin}/jl5c" />

		<delete file="${bin}/defs" />
	</target>

	<!-- Configure a single extension
       @param ${ext}         the name of the extension 
    -->
	<target name="configure-ext">
		<available file="configure-${ext}.xml" property="configure-ext.configure-available" />
		<antcall target="configure-ext-conditional" />
	</target>

	<target name="configure-ext-conditional" if="configure-ext.configure-available" depends="executable-defs">
		<ant antfile="configure-${ext}.xml" target="configure" inheritRefs="true" />
		<delete file="${bin}/defs" />
	</target>

	<!-- initialize the build -->
	<target name="init" depends="configure">
		<!-- Create the time stamp -->
		<tstamp />
		<!-- Create the build directory structure used by compile -->
		<mkdir dir="${classes}" />
		<mkdir dir="${cup-classes}" />
		<mkdir dir="${bin}" />
	</target>

	<target name="clean" description="Cleans up the directory tree: deletes the distribution directory and the classes directories">
		<!-- Delete the ${classes} and ${dist} directory trees -->
		<delete dir="${classes}" />
		<delete dir="${cup-classes}" />
		<delete dir="${dist}" />
	</target>

	<target name="clobber" depends="clean" description="Cleans up the directory tree and deletes generated files">
		<delete>
			<fileset dir="${src}">
				<include name="**/Grm.java" />
				<include name="**/sym.java" />
				<include name="**/Lexer_c.java" />
				<include name="**/*_ppg.cup" />
				<include name="${src}/ppg/parse/Constant.java" />
				<include name="${src}/ppg/parse/Grm.java" />
			</fileset>
		</delete>
		<delete>
			<fileset dir="${bin}">
				<include name="jlc" />
				<include name="defs" />
			</fileset>
		</delete>
	</target>

	<target name="cup" depends="init" description="Builds the extended CUP parser generator">
		<antcall target="cup-parser-using-jar">
			<param name="parser.dir" value="${src}/java_cup" />
			<param name="cup.file" value="parser.cup" />
			<param name="parser.class" value="parser" />
			<param name="symbol.class" value="sym" />
		</antcall>
		<javac srcdir="${src}" destdir="${cup-classes}" debug="on" includes="java_cup/**">
			<classpath refid="standard.classpath" />
		</javac>
		<jar jarfile="${lib}/java_cup_ext.jar" basedir="${cup-classes}" includes="java_cup/**" />
	</target>

	<!-- compile a single extension, named ${ext} -->
	<target name="compile-ext">
		<javac srcdir="${src}" destdir="${classes}" debug="on" includes="polyglot/ext/${ext}/**" excludes="**/qq/**,**/test/**,**/tests/**,**/runtime/**">
			<classpath refid="standard.classpath" />
			<!-- HACK: the excludes above wouldn't be necessary if we
           reorganized the source tree -->
		</javac>
	</target>

	<target name="compile-ext-qq-dep" if="has-qq">
		<antcall target="compile-ext-qq" />
	</target>

	<!-- compile the extension ${ext}'s quasiquoter -->
	<target name="compile-ext-qq">
		<javac srcdir="${src}" destdir="${classes}" debug="on" includes="polyglot/ext/${ext}/qq/**">
			<classpath refid="standard.classpath" />
		</javac>
	</target>

	<!-- Build a PPG parser based on parameters supplied to the target.
       @param parser.dir    The directory, relative to $basedir, in which
                            the PPG file is located.
       @param ppg.file      The name of the PPG file.
       @param cup.file      The name of the CUP file to output.
       @param parser.class  The name to be passed to CUP with -parser.
       @param symbol.class  The name to be passed to CUP with -symbols.
   -->
	<target name="ppg-parser" depends="ppg-parser-deps" unless="ppg.parser.up-to-date">
		<java classname="ppg.PPG" fork="true" failonerror="true">
			<classpath refid="standard.classpath" />
			<arg value="${parser.dir}/${ppg.file}" />
			<arg value="-o" />
			<arg value="${parser.dir}/${cup.file}" />
		</java>
		<antcall target="cup-parser-using-jar" /> 
	</target>

	<!-- Set the property ppg.parser.up-to-date if the parser is in fact
       up to date.  Called by the ppg-parser target.
   -->
	<target name="ppg-parser-deps">
		<dependset>
			<srcfileset dir="${parser.dir}">
				<include name="${ppg.file}" />
				<include name="${base.parser}" />
			</srcfileset>
			<targetfileset dir="${parser.dir}">
				<include name="${cup.file}" />
				<include name="${parser.class}.java" />
				<include name="${symbol.class}.java" />
			</targetfileset>
		</dependset>
		<condition property="ppg.parser.up-to-date">
			<and>
				<available file="${parser.dir}/${cup.file}" />
				<available file="${parser.dir}/${parser.class}.java" />
				<available file="${parser.dir}/${symbol.class}.java" />
			</and>
		</condition>
	</target>

	<!-- Build a CUP parser based on parameters supplied to the target.
       @param parser.dir    The directory, relative to $basedir, in which
                            the CUP file is located.
       @param parser.class  The name to be passed to CUP with -parser.
       @param symbol.class  The name to be passed to CUP with -symbols.
       @param cup.file      The name of the CUP file.
   -->
	<target name="cup-parser" depends="cup,cup-parser-using-jar" unless="cup.parser.up-to-date">
	</target>


	<!-- The following target builds a cup parser using the version of
       cup already sitting in the java_cup.jar file. This is needed to
       allow the building of cup to be bootstrapped. -->
	<target name="cup-parser-using-jar" depends="cup-parser-deps" unless="cup.parser.up-to-date">
		<java classname="java_cup.Main" fork="true" dir="${parser.dir}" failonerror="true">
			<classpath refid="standard.classpath" />
			<arg line="-parser ${parser.class} -symbols ${symbol.class} ${cup.file}" />
		</java>
	</target>

	<!-- Set the property cup.parser.up-to-date if the parser is in fact
       up to date.  Called by the cup-parser-using-jar target.
   -->
	<target name="cup-parser-deps">
		<dependset>
			<srcfileset dir="${parser.dir}" includes="${cup.file}" />
			<targetfileset dir="${parser.dir}">
				<include name="${parser.class}.java" />
				<include name="${symbol.class}.java" />
			</targetfileset>
		</dependset>
		<condition property="cup.parser.up-to-date">
			<and>
				<available file="${parser.dir}/${parser.class}.java" />
				<available file="${parser.dir}/${symbol.class}.java" />
			</and>
		</condition>
	</target>

	<!-- Build a JFlex lexer based on parameters supplied to the target.
       @param lexer.dir     The directory, relative to $basedir, in which
                            the JFlex file is located.
       @param lexer.class   The name of the lexer as declared with %class
                            in the JFlex file.
       @param jflex.file    The name of the JFlex file.
   -->
	<target name="jflex-lexer" depends="jflex-lexer-deps" unless="jflex.lexer.up-to-date">
		<java classname="JFlex.Main" fork="true" dir="${lexer.dir}" failonerror="true">
			<classpath refid="standard.classpath" />
			<arg line="${jflex.file}" />
		</java>
	</target>

	<!-- Set the property jflex.lexer.up-to-date if the lexer is in fact
       up to date.  Called by the jflex-lexer target.
   -->
	<target name="jflex-lexer-deps">
		<dependset>
			<srcfileset dir="${lexer.dir}" includes="${jflex.file}" />
			<targetfileset dir="${lexer.dir}" includes="${lexer.class}.java" />
		</dependset>
		<available property="jflex.lexer.up-to-date" file="${lexer.dir}/${lexer.class}.java" />
	</target>


	<!-- Builds PPG -->
	<target name="ppg">
		<antcall target="jflex-lexer">
			<param name="lexer.dir" value="${src}/ppg/lex" />
			<param name="lexer.class" value="Lexer" />
			<param name="jflex.file" value="ppg.flex" />
		</antcall>
		<antcall target="cup-parser">
			<param name="parser.dir" value="${src}/ppg/parse" />
			<param name="parser.class" value="Parser" />
			<param name="symbol.class" value="Constant" />
			<param name="cup.file" value="ppg.cup" />
		</antcall>
		<javac srcdir="${src}" destdir="${classes}" debug="on" includes="ppg/**" excludes="ppg/test/**">
			<classpath refid="standard.classpath" />
		</javac>
	</target>

	<!-- Build the quasi-quote parser and lexer for an extension, assuming the
       standard names and places.
       @param ext    The extension name.
   -->
	<target name="standard-ext-qq">
		<antcall target="jflex-lexer">
			<param name="lexer.dir" value="${src}/polyglot/ext/${ext}/qq" />
			<param name="lexer.class" value="Lexer_c" />
			<param name="jflex.file" value="qq.flex" />
		</antcall>
		<antcall target="ppg-parser">
			<param name="parser.dir" value="${src}/polyglot/ext/${ext}/qq" />
			<param name="ppg.file" value="qq.ppg" />
			<param name="base.parser" value="${src}/polyglot/ext/${ext}/parse/${ext}_ppg.cup" />
			<param name="cup.file" value="qq_ppg.cup" />
			<param name="parser.class" value="Grm" />
			<param name="symbol.class" value="sym" />
		</antcall>
	</target>

	<!-- Build the PPG parser for an extension, assuming that
       it is located in the standard place and named
       the standard name that we usually use.
       @param ext    The extension name.
   -->
	<target name="standard-ext-ppg-parser">
		<antcall target="ppg-parser">
			<param name="parser.dir" value="${src}/polyglot/ext/${ext}/parse" />
			<param name="ppg.file" value="${ext}.ppg" />
			<param name="cup.file" value="${ext}_ppg.cup" />
			<param name="parser.class" value="Grm" />
			<param name="symbol.class" value="sym" />
		</antcall>
	</target>

	<!-- Build the CUP parser for an extension, assuming that
       it is located in the standard place and named
       the standard name that we usually use.
       @param ext    The extension name.
   -->
	<target name="standard-ext-cup-parser">
		<antcall target="cup-parser">
			<param name="parser.dir" value="${src}/polyglot/ext/${ext}/parse" />
			<param name="cup.file" value="${ext}.cup" />
			<param name="parser.class" value="Grm" />
			<param name="symbol.class" value="sym" />
		</antcall>
	</target>

	<!-- Build the lexer for an extension, assuming that
       they it is located in the standard place and named
       the standard name that we usually use.
       @param ext    The extension name.
   -->
	<target name="standard-ext-lexer">
		<antcall target="jflex-lexer">
			<param name="lexer.dir" value="${src}/polyglot/ext/${ext}/parse" />
			<param name="lexer.class" value="Lexer_c" />
			<param name="jflex.file" value="${ext}.flex" />
		</antcall>
	</target>

	<target name="standard-ext-qq-dep" if="has-qq">
		<antcall target="standard-ext-qq" />
	</target>

	<!-- Build a standard extension
       @param ext          The name of the extension.
       @param parser.type  Either "cup" or "ppg".
       @param base.parser  The base parser.  Pass in iff parser.type is "ppg".
       @param has-qq       Pass in iff the extension has a qq package.
   -->
	<target name="standard-ext">
		<antcall target="configure-ext" />
		<antcall target="standard-ext-lexer" />
		<antcall target="standard-ext-${parser.type}-parser" />
		<antcall target="standard-ext-qq-dep" />
		<antcall target="compile-ext" />
		<antcall target="compile-ext-qq-dep" />
	</target>

	<!-- JL5 ext -->
	<target name="jl5" depends="init">
	        <javac srcdir="${src}" destdir="${classes}" debug="on" includes="polyglot/types/reflect/**">
		       <classpath refid="standard.classpath" />
		</javac>
		<antcall target="standard-ext">
			<param name="ext" value="jl5" />
			<param name="parser.type" value="ppg" />
			<param name="base.parser" value="polyglot/ext/jl5/parse/java12.cup" />
		</antcall>
	</target>

	<!-- JL5 jar -->
	<target name="jl5-jar" depends="jl5">
		<jar jarfile="${lib}/jl5.jar" basedir="${classes}" includes="polyglot/ext/jl5/**,polyglot/types/reflect/**" />
	</target>
	
	<target name="dist" depends="jl5-jar">
		<!-- dist archive -->
		<tstamp />
		<property name="polyglot5-archive" location="${dist}/polyglot5-${DSTAMP}.tar.gz"/>

		<delete dir="${polyglot5-dist}" />
		<mkdir dir="${polyglot5-dist}" />
		<copy todir="${polyglot5-dist}/src">
			<fileset dir="${src}" defaultexcludes="yes">
	<!--			<exclude name="**/CVS/**"/>
				<exclude name=".cvsignore" /> -->
				<exclude name="**/Grm.java" />
				<exclude name="**/sym.java" />
				<exclude name="**/Lexer_c.java" />
				<exclude name="**/*_ppg.cup" />
			</fileset>
		</copy>
		<copy todir="${polyglot5-dist}/testing">
			<fileset dir="testing" defaultexcludes="yes">
				<exclude name="**/genout/**" />
				<exclude name="**/*.*-ckd" />
				<exclude name="**/*.class" />
				<exclude name="**/*.java" />
				<exclude name="**/core" />
				<exclude name="**/file-list.junk" />
				<exclude name="**/*-expected.old" />
			</fileset>
		</copy>
		<copy todir="${polyglot5-dist}/lib">
			<fileset dir="${lib}" defaultexcludes="yes">
				<include name="*.jar"/>
			</fileset>
		</copy>
		<copy todir="${polyglot5-dist}/bin" file="${bin}/jlc.in" />
		<copy todir="${polyglot5-dist}" includeemptydirs="no">
			<fileset dir="${basedir}" includes="*"> <!-- don't include subdirs -->
				<exclude name="TODO.txt" />
			</fileset>
		</copy>
		<tar destfile="${polyglot5-archive}" compression="gzip">
			<tarfileset dir="${polyglot5-dist}" prefix="polyglot5/" />
		</tar> 
	</target>

</project>
